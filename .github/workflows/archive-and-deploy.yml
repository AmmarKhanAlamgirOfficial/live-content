name: Archive Posts and Deploy Site

on:
  schedule:
    # Runs at 18:30 UTC (12:00 AM IST)
    - cron: '30 18 * * *'
  workflow_dispatch:

jobs:
  archive:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_FOR_ARCHIVE }}

      - name: Archive Posts from Supabase
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        run: |
          npm install @supabase/supabase-js gray-matter
          node - <<'EOF'
            const { createClient } = require('@supabase/supabase-js');
            const fs = require('fs');
            const path = require('path');
            const matter = require('gray-matter');

            const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_KEY);
            const POSTS_TO_KEEP = 10;

            async function run() {
              console.log('Fetching all posts to determine which to archive...');
              const { data: allPosts, error: fetchError } = await supabase
                .from('live_posts')
                .select('*')
                .order('timestamp', { ascending: false });

              if (fetchError) throw fetchError;

              if (allPosts.length <= POSTS_TO_KEEP) {
                console.log(`Post count (${allPosts.length}) is within the limit of ${POSTS_TO_KEEP}. No archival needed.`);
                return;
              }

              const postsToArchive = allPosts.slice(POSTS_TO_KEEP);
              console.log(`Found ${allPosts.length} posts. Archiving ${postsToArchive.length} posts.`);

              const postIdsToDelete = [];
              for (const post of postsToArchive) {
                const { id, headline, content, author_name, timestamp, tags, is_pinned } = post;
                if (is_pinned) continue;

                const frontmatter = { headline, author_name, timestamp, tags };
                const fileContent = matter.stringify(content || '', frontmatter);
                
                const date = new Date(timestamp);
                const safeHeadline = (headline || 'update').replace(/[^a-z0-9]/gi, '-').toLowerCase();
                const fileName = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}-${safeHeadline.substring(0, 50)}.md`;
                
                fs.writeFileSync(path.join(process.cwd(), '_posts', fileName), fileContent);
                console.log(`Archived post ${id} to _posts/${fileName}`);
                postIdsToDelete.push(id);
              }

              if (postIdsToDelete.length > 0) {
                console.log(`Deleting ${postIdsToDelete.length} posts from Supabase...`);
                const { error: deleteError } = await supabase.from('live_posts').delete().in('id', postIdsToDelete);
                if (deleteError) throw deleteError;
                console.log('Deletion successful.');
              }
            }
            run().catch(err => { console.error(err); process.exit(1); });
          EOF
      
      - name: Commit and Push Changes
        id: commit_push # Give this step an ID
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions-bot@github.com'
          git add _posts/
          if ! git diff-index --quiet HEAD; then
            echo "changes=true" >> $GITHUB_OUTPUT
            git commit -m 'feat: Archive older live posts'
            git push
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No new posts to archive."
          fi

  # This job will now run correctly after the archive job
  deploy:
    runs-on: ubuntu-latest
    needs: archive # This line is crucial
    if: needs.archive.outputs.changes == 'true' # Only run if there were new posts
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Build with Jekyll
        run: bundle exec jekyll build --source . --destination _site

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
